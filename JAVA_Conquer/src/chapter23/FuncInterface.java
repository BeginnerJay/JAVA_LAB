package chapter23;

public class FuncInterface {
    public static void main(String[] args) {
        PlusOne po = i -> i+1;
        System.out.printf("result = %d", po.plus(5));
    }
}

interface PlusOne {
    int plus(int i);
}
/*
함수와 마찬가지로 인수를 받고 본체를 실행한 후 리턴값을 반환하며, 예외 목록도 밝힐 수 있다.
그러나 이름이 없고, 지정자도 붙이지 않으며, 본체 코드가 간결하다.

람다식은 리턴 타입을 따로 밝히지 않으며, 문맥에 따라 자동으로 결정된다.
블록 안에 지역 변수를 선언할 수도 있고, 루프를 돌릴 수도 있다.
    하지만 이렇게 길다면 일반 메서드를 만드는 것이 더 어울린다.
람다식도 값을 반환할 수 있다. 이 때는 메서드와 마찬가지로 return 명령을 사용한다.
명령문 하나로만 구성된 람다식은 {} 괄호를 생략할 수 있다.
값을 리턴하는 명령문은 return 키워드도 생랼할 수 있다.
컴파일러는 람다식의 타입을 통해 인수의 타입을 추론한다.
    그래서 경우에 따라 타입 선언문을 생략할 수 있다.
    인수가 하나밖에 없으면 괄호도 생략 가능하다.
 */

/*
XXX = i -> i+1에서 XXX의 정체는 무엇인가? : 함수형 인터페이스이다.
원래 자바에서 함수는 클래스의 멤버일 뿐 단독으로 사용할 수 없다.
    하지만 람다가 추가되면서 함수가 값으로 취급될 수 있어, 함수의 시그니처를 선언할 필요 有
함수형 인터페이스는 딱 하나의 추상 메서드로 람다의 시그니처를 정의한다.
 */